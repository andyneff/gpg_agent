#!/usr/bin/env bash

#Preloads the key files into the gpg-agent docker. 
#The keys are specifies as arguments to preload.bsh. 
#- They can either be files or directories of *.key files

set -eu

CUR_DIR=$(dirname ${BASH_SOURCE[0]})
: ${CONTAINER_NAME=gpg-agent}

if [[ $# > 0 ]] && [ "$1" == "-r" ]; then
  ${CUR_DIR}/stop.bsh
  shift
fi

${CUR_DIR}/start.bsh

#wait at most 10 seconds
for (( x=0; x<10; x++ )); do
  if docker exec -it ${CONTAINER_NAME} bash -c \
     "gpg-connect-agent --homedir="'${GNUPGHOME}'" /bye"; then
     #This is annoyingly complicated (the bash call + env var)
     #so that it works on REAL linux AND mingw alike
    break
  else
    sleep 1
  fi
done

while (( $# > 0 )); do
  if [ -d "$1" ]; then
    for file in $(ls $1/*.key); do
      docker cp $file ${CONTAINER_NAME}:/tmp/keys/
    done
  else
    docker cp $1 ${CONTAINER_NAME}:/tmp/keys/
  fi
  shift
done

#I only need script cause of https://github.com/docker/docker/issues/8755 HORRAY BUGS!
docker exec -it ${CONTAINER_NAME} script /dev/null -q -c ' \
  for key in $(ls /tmp/keys/*.key); do \
    if [ -s $key ]; then \
      gpg --import $key; \
      gpg2 -o /dev/null -s /dev/null; \
      rm -f /tmp/gpg-agent/*.gpg; \
    fi \
  done'
#WHAT AM I DOING HERE? Well... This is the most UNIVERSAL way I have discovered
#to safely cache all the gpg keys. They are deleted after each load so that that
#there can be ANY kind of intermingling in how the keys are defined (subkeys
#of the same primary key, etc...) and gpg will ALLOW this to work. Normally you
#can not import a subkey for a pre-existing primary key. This gets AROUND that
#problem (as merging is WAY too complicated... but possible)